diff -Naur a/ffi/build.py b/ffi/build.py
--- a/ffi/build.py	2020-01-10 14:51:38.000000000 +0100
+++ b/ffi/build.py	2020-01-10 14:45:27.059843040 +0100
@@ -110,7 +110,7 @@
     out = out.decode('latin1')
     print(out)
     if not (out.startswith('8.0.') or out.startswith('7.0.')
-            or out.startswith('7.1.')):
+            or out.startswith('7.1.') or out.startswith('9.0.') or out.startswith('11.0.')):
         msg = (
             "Building llvmlite requires LLVM 7.0.x, 7.1.x or 8.0.x Be sure to "
             "set LLVM_CONFIG to the right executable path.\n"
diff --git a/ffi/linker.cpp b/ffi/linker.cpp
index 57bb80b..2cc0019 100644
--- a/ffi/linker.cpp
+++ b/ffi/linker.cpp
@@ -42,7 +42,7 @@ LLVMPY_LinkModules(LLVMModuleRef Dest, LLVMModuleRef Src, const char **Err)
     auto OldDiagnosticHandler = Ctx.getDiagnosticHandler();
 
     // set the handler to a new one
-    Ctx.setDiagnosticHandler(llvm::make_unique<ReportNotAbortDiagnosticHandler>(errstream));
+    Ctx.setDiagnosticHandler(std::make_unique<ReportNotAbortDiagnosticHandler>(errstream));
 
     // link
     bool failed = LLVMLinkModules2(Dest, Src);
diff --git a/ffi/transforms.cpp b/ffi/transforms.cpp
index 23bfd72..8cb8830 100644
--- a/ffi/transforms.cpp
+++ b/ffi/transforms.cpp
@@ -6,7 +6,7 @@
 
 extern "C" {
 
-namespace llvm {
+  /*namespace llvm {
     inline PassManagerBuilder *unwrap(LLVMPassManagerBuilderRef P) {
         return reinterpret_cast<PassManagerBuilder*>(P);
     }
@@ -14,7 +14,7 @@ namespace llvm {
     inline LLVMPassManagerBuilderRef wrap(PassManagerBuilder *P) {
         return reinterpret_cast<LLVMPassManagerBuilderRef>(P);
     }
-}
+    }*/
 
 
 API_EXPORT(LLVMPassManagerBuilderRef)
